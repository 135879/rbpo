//	Module Interface Unit

//ѕри необходимости подключить заголовочные файлы, используйте фрагмент глобального модул€(Global Module Fragment).
module;
#include <cmath>
export module Task3;

/*
++	‘ункции f3 и f4 реализовать с помощью цикла do Е while.–еализации функций должны возвращать те же результаты, что и в предыдущих задани€х.
++	ќбъ€влени€ функций f1, f2, a, f3, f4 поместить в единицу трансл€ции, описывающую интерфейс модул€(Module Interface Unit).
++	Ёкспортировать функции f1, f2, f3, f4.—амо пространство имен Ќ≈ экспортировать.
++	 аждое определение функций f1, f2, a, f3, f4 поместить в отдельную единицу трансл€ции, описывающую реализацию модул€(Module Implementation Unit).
++	»тоговый модуль будет содержать одну единицу трансл€ции, описывающую интерфейс модул€ и 5 единиц трансл€ции, описывающих реализацию модул€.¬ каждой единице трансл€ции будет размещено одно определение функции.
++	ѕри необходимости подключить заголовочные файлы, используйте фрагмент глобального модул€(Global Module Fragment).
*/



namespace RBPO
{
	namespace Lab3
	{
		namespace Task3
		{
			// Ёкспортировать функции f1, f2, f3, f4.—амо пространство имен Ќ≈ экспортировать.
			// ќбъ€влени€ функций f1, f2, a, f3, f4 поместить в единицу трансл€ции, описывающую интерфейс модул€(Module Interface Unit).
			export double f1(int x);
			export double f2(int x);
			export double f3(int x, int n);
			export double f4(int x, double e);
			export double a(int i);
		}
	}
}